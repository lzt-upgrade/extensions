import path from "node:path";
import fs from "node:fs/promises";

import lightningcss from "./lightningcss-bun";

import config from "./lztup.config.ts";

const minify: boolean = config.minify;
const sortMap: Record<string, number> = {
  name: 0,
  description: 1,
  version: 2,
};
const sortOrder = Object.entries(sortMap);

async function getScriptDirs() {
  const files = await fs.readdir(import.meta.dir, { withFileTypes: true });
  const dirs = files.filter(
    (file) =>
      file.isDirectory() &&
      !file.name.startsWith(".") &&
      !config.ignoredDirs.includes(file.name),
  );

  const scripts: string[] = [];
  for await (const dir of dirs) {
    const headersExist = await fs.exists(
      path.resolve(import.meta.dir, dir.name, config.metaFile),
    );
    if (headersExist) {
      scripts.push(dir.name);
    }
  }

  return scripts;
}

async function generateMeta(dir: string) {
  const headers = await import(`./${dir}/${config.metaFile}`);
  const data = Object.entries(headers);
  const meta = data
    .filter(([key]) => key !== "default")
    .sort((a, b) => {
      let indexA =
        sortOrder.find(([key, _]) => a[0].startsWith(key))?.[1] ?? data.length;
      let indexB =
        sortOrder.find(([key, _]) => b[0].startsWith(key))?.[1] ?? data.length;

      return indexA - indexB;
    })
    .map(([key, val]) => {
      if (Array.isArray(val)) {
        return val.map((finalValue) => `// @${key} ${finalValue}`).join("\n");
      }

      if (typeof val === "object" && val !== null) {
        return Object.entries(val)
          .map(([subKey, finalValue]) =>
            subKey === "default"
              ? `// @${key} ${finalValue}`
              : `// @${key}:${subKey} ${finalValue}`,
          )
          .join("\n");
      }

      return `@${key} ${val}`;
    });
  return [
    "==UserScript==",
    ...meta,
    "==/UserScript==",
    "Generated by LZT Upgrade extension bundler. Telegram: https://t.me/lzt_upgrade Github: https://github.com/lzt-upgrade",
  ]
    .map((val) => (val.startsWith("//") ? val : `// ${val}`))
    .join("\n");
}

const scripts = await getScriptDirs();

const outputs = await Bun.build({
  entrypoints: scripts.map((script) => `./${script}/index`),
  outdir: "./dist",
  target: "browser",
  minify,
  naming: `[dir]/[dir]${minify ? "-min" : ""}.user.[ext]`,
  root: ".",
  publicPath: "https://cdn.lztup.cc/",
  plugins: [lightningcss()],
  external: ["DOMPurify", "XenForo", "FroalaEditor"],
});

if (!outputs.success) {
  console.error("Build failed");
  for (const message of outputs.logs) {
    // Bun will pretty print the message object
    console.error(message);
  }
  throw new Error(
    "Failed to build user scripts! See logs for more information",
  );
}

for await (const artifact of outputs.outputs) {
  // TODO: edit to autodetect path to headers.json
  const currentScript = scripts.find((script) =>
    artifact.path.includes(script),
  );

  if (!currentScript) {
    throw new Error(
      `Failed to build ${artifact.path}! Script folder not found.`,
    );
  }

  const meta = await generateMeta(currentScript);
  const content = await artifact.text();
  await Bun.write(artifact.path, `${meta}\n\n${content}`);
  console.info(
    `Successfully builded ${currentScript} (loader: ${artifact.loader}, hash: ${artifact.hash}, minified: ${minify})`,
  );
}
